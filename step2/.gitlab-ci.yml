stages:
  - lint
  - build
  - test
  - dockerize
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  IMAGE_API: $CI_REGISTRY_IMAGE/api
  IMAGE_WEB: $CI_REGISTRY_IMAGE/web
  TAG: $CI_COMMIT_SHORT_SHA

default:
  before_script:
    - echo "CI for $CI_PROJECT_PATH@$CI_COMMIT_REF_NAME ($CI_COMMIT_SHORT_SHA)"
  tags:
    - self-hosted

lint:js:
  stage: lint
  image: node:20-alpine
  script:
    - cd step1/app/backend && node -e "console.log('backend ok')"
    - cd ../../..
    - cd step1/app/frontend && node -e "console.log('frontend ok')"

build:web:
  stage: build
  image: node:20-alpine
  script:
    - cd step1/app/frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - step1/app/frontend/dist
    expire_in: 1 hour

test:api:
  stage: test
  image: node:20-alpine
  script:
    - cd step1/app/backend
    - node -e "require('fs').accessSync('server.js'); console.log('smoke tests ok')"

dockerize:
  stage: dockerize
  image: docker:26.1.3
  services:
    - docker:26.1.3-dind
  variables:
    DOCKER_BUILDKIT: "1"
  script:
    - echo $CI_REGISTRY | xargs -I{} sh -c 'echo "Using registry: {}"'
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$IMAGE_API:$TAG" -f step1/app/backend/Dockerfile step1/app/backend
    - docker build -t "$IMAGE_WEB:$TAG" -f step1/app/frontend/Dockerfile step1/app/frontend
    - docker push "$IMAGE_API:$TAG"
    - docker push "$IMAGE_WEB:$TAG"
    - docker tag "$IMAGE_API:$TAG" "$IMAGE_API:latest" && docker push "$IMAGE_API:latest"
    - docker tag "$IMAGE_WEB:$TAG" "$IMAGE_WEB:latest" && docker push "$IMAGE_WEB:latest"

deploy:prod:
  stage: deploy
  image: alpine:3.20
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  variables:
    COMPOSE_FILE: step2/deploy/docker-compose.prod.yml
    PROJECT_DIR: /srv/konovator
  before_script:
    - mkdir -p $PROJECT_DIR
  script:
    - apk add --no-cache docker-cli docker-cli-compose
    - echo "Creating compose file with images $IMAGE_API:$TAG and $IMAGE_WEB:$TAG"
    - sed -e "s#__IMAGE_API__#$IMAGE_API:$TAG#g" -e "s#__IMAGE_WEB__#$IMAGE_WEB:$TAG#g" step2/deploy/docker-compose.prod.yml.template > docker-compose.prod.yml
    - docker compose -f docker-compose.prod.yml pull
    - docker compose -f docker-compose.prod.yml up -d --remove-orphans
    - docker image prune -f
  environment:
    name: production
    url: http://your.domain.example
  tags:
    - prod-runner
